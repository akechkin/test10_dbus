
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__org_freedesktop_NotificationsSimple_h__PROXY_MARSHAL_H
#define __dbusxx__org_freedesktop_NotificationsSimple_h__PROXY_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace freedesktop {

class Notifications_proxy
: public ::DBus::InterfaceProxy
{
public:

    Notifications_proxy()
    : ::DBus::InterfaceProxy("org.freedesktop.Notifications")
    {
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void Notify(const std::string& app_name, const uint32_t& replace_id, const std::string& app_icon, const std::string& summary, const std::string& body, const std::vector< std::string >& actions, const std::map< std::string, ::DBus::Variant >& hints, const int32_t& expire_timeout)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << app_name;
        wi << replace_id;
        wi << app_icon;
        wi << summary;
        wi << body;
        wi << actions;
        wi << hints;
        wi << expire_timeout;
        call.member("Notify");
        ::DBus::Message ret = invoke_method (call);
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

} } 
#endif //__dbusxx__org_freedesktop_NotificationsSimple_h__PROXY_MARSHAL_H
