
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__ObjEcho_adaptor_h__ADAPTOR_MARSHAL_H
#define __dbusxx__ObjEcho_adaptor_h__ADAPTOR_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace test {

class iface1_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    iface1_adaptor()
    : ::DBus::InterfaceAdaptor("test.iface1")
    {
        register_method(iface1_adaptor, Hello, _Hello_stub);
        register_method(iface1_adaptor, Echo, _Echo_stub);
    }

    ::DBus::IntrospectedInterface *introspect() const 
    {
        static ::DBus::IntrospectedArgument Hello_args[] = 
        {
            { "name", "s", true },
            { "greeting", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Echo_args[] = 
        {
            { "input", "v", true },
            { "output", "v", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod iface1_adaptor_methods[] = 
        {
            { "Hello", Hello_args },
            { "Echo", Echo_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod iface1_adaptor_signals[] = 
        {
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty iface1_adaptor_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface iface1_adaptor_interface = 
        {
            "test.iface1",
            iface1_adaptor_methods,
            iface1_adaptor_signals,
            iface1_adaptor_properties
        };
        return &iface1_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual std::string Hello(const std::string& name) = 0;
    virtual ::DBus::Variant Echo(const ::DBus::Variant& input) = 0;

public:

    /* signal emitters for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _Hello_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::string argout1 = Hello(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _Echo_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::Variant argin1; ri >> argin1;
        ::DBus::Variant argout1 = Echo(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
};

} 
namespace test {

class iface2_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    iface2_adaptor()
    : ::DBus::InterfaceAdaptor("test.iface2")
    {
        register_method(iface2_adaptor, Hello2, _Hello2_stub);
        register_method(iface2_adaptor, Echo2, _Echo2_stub);
    }

    ::DBus::IntrospectedInterface *introspect() const 
    {
        static ::DBus::IntrospectedArgument Hello2_args[] = 
        {
            { "name", "s", true },
            { "greeting", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Echo2_args[] = 
        {
            { "input", "v", true },
            { "output", "v", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod iface2_adaptor_methods[] = 
        {
            { "Hello2", Hello2_args },
            { "Echo2", Echo2_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod iface2_adaptor_signals[] = 
        {
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty iface2_adaptor_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface iface2_adaptor_interface = 
        {
            "test.iface2",
            iface2_adaptor_methods,
            iface2_adaptor_signals,
            iface2_adaptor_properties
        };
        return &iface2_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual std::string Hello2(const std::string& name) = 0;
    virtual ::DBus::Variant Echo2(const ::DBus::Variant& input) = 0;

public:

    /* signal emitters for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _Hello2_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::string argout1 = Hello2(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _Echo2_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::Variant argin1; ri >> argin1;
        ::DBus::Variant argout1 = Echo2(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
};

} 
#endif //__dbusxx__ObjEcho_adaptor_h__ADAPTOR_MARSHAL_H
