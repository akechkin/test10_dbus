
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__ObjKeyboard_adaptor_h__ADAPTOR_MARSHAL_H
#define __dbusxx__ObjKeyboard_adaptor_h__ADAPTOR_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace _X11_ {

class keyboard_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    keyboard_adaptor()
    : ::DBus::InterfaceAdaptor("_X11_.keyboard")
    {
        register_method(keyboard_adaptor, SwitchKeyboardLayout, _SwitchKeyboardLayout_stub);
    }

    ::DBus::IntrospectedInterface *introspect() const 
    {
        static ::DBus::IntrospectedArgument SwitchKeyboardLayout_args[] = 
        {
            { "greeting", "b", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod keyboard_adaptor_methods[] = 
        {
            { "SwitchKeyboardLayout", SwitchKeyboardLayout_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod keyboard_adaptor_signals[] = 
        {
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty keyboard_adaptor_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface keyboard_adaptor_interface = 
        {
            "_X11_.keyboard",
            keyboard_adaptor_methods,
            keyboard_adaptor_signals,
            keyboard_adaptor_properties
        };
        return &keyboard_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual bool SwitchKeyboardLayout() = 0;

public:

    /* signal emitters for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _SwitchKeyboardLayout_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        bool argout1 = SwitchKeyboardLayout();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
};

} 
#endif //__dbusxx__ObjKeyboard_adaptor_h__ADAPTOR_MARSHAL_H
